/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.push;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.kroll.common.Log;

import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.gcm.GoogleCloudMessaging;
import com.google.android.gms.iid.InstanceID;

@Kroll.module(name = "Tipush", id = "ti.push")
public class TipushModule extends KrollModule {

	private static final String TAG = "TipushModule";

	// Properties
	public static final String PROPERTY_SENDER_ID = "senderId";
	public static final String PROPERTY_DEVICE_TOKEN = "deviceToken";
	public static final String PROPERTY_PAYLOAD = "payload";
	public static final String PROPERTY_SMALL_ICON = "smallIcon";
	public static final String PROPERTY_LARGE_ICON = "largeIcon";

	// Module constants
	@Kroll.constant
	public static final int SUCCESS = ConnectionResult.SUCCESS;
	@Kroll.constant
	public static final int SERVICE_DISABLED = ConnectionResult.SERVICE_DISABLED;
	@Kroll.constant
	public static final int SERVICE_INVALID = ConnectionResult.SERVICE_INVALID;
	@Kroll.constant
	public static final int SERVICE_MISSING = ConnectionResult.SERVICE_MISSING;
	@Kroll.constant
	public static final int SERVICE_UPDATING = ConnectionResult.SERVICE_UPDATING;
	@Kroll.constant
	public static final int SERVICE_VERSION_UPDATE_REQUIRED = ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED;

	public TipushModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
	}

	@Kroll.method
	public int isGooglePlayServicesAvailable() {
		return GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(TiApplication
						.getAppRootOrCurrentActivity());
	}

	@Kroll.method
	public void retrieveDeviceToken(KrollDict d) {
		final String senderId = TiConvert.toString(d, PROPERTY_SENDER_ID);
		final KrollFunction successCallback = getFunction(d,
				TiC.PROPERTY_SUCCESS);
		final KrollFunction errorCallback = getFunction(d, TiC.EVENT_ERROR);
		new AsyncTask<Void, Void, Void>() {
			@Override
			protected Void doInBackground(Void... params) {
				try {
					String token = InstanceID.getInstance(
							TiApplication.getAppRootOrCurrentActivity())
							.getToken(senderId,
									GoogleCloudMessaging.INSTANCE_ID_SCOPE,
									null);
					if (successCallback != null) {
						HashMap<String, Object> dict = new HashMap<String, Object>();
						dict.put(PROPERTY_DEVICE_TOKEN, token);
						successCallback.call(getKrollObject(), dict);
					}
				} catch (Exception e) {
					if (errorCallback != null) {
						HashMap<String, Object> dict = new HashMap<String, Object>();
						dict.put(TiC.EVENT_PROPERTY_ERROR, e.getMessage());
						errorCallback.call(getKrollObject(), dict);
					}
				}
				return null;
			}
		}.execute();
	}

	@Kroll.method
	public void clearStatus(KrollDict d) {
		final String senderId = TiConvert.toString(d, PROPERTY_SENDER_ID);
		final KrollFunction successCallback = getFunction(d,
				TiC.PROPERTY_SUCCESS);
		final KrollFunction errorCallback = getFunction(d, TiC.EVENT_ERROR);
		new AsyncTask<Void, Void, Void>() {
			@Override
			protected Void doInBackground(Void... params) {
				try {
					InstanceID.getInstance(
							TiApplication.getAppRootOrCurrentActivity())
							.deleteToken(senderId,
									GoogleCloudMessaging.INSTANCE_ID_SCOPE);
					if (successCallback != null) {
						successCallback.call(getKrollObject(),
								new HashMap<String, Object>());
					}
				} catch (Exception e) {
					if (errorCallback != null) {
						HashMap<String, Object> dict = new HashMap<String, Object>();
						dict.put(TiC.EVENT_PROPERTY_ERROR, e.getMessage());
						errorCallback.call(getKrollObject(), dict);
					}
				}
				return null;
			}
		}.execute();
	}

	@Kroll.method
	public void updateGooglePlayServices() {
		Intent intent = new Intent(Intent.ACTION_VIEW,
				Uri.parse("market://details?id=com.google.android.gms"));
		intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
				| Intent.FLAG_ACTIVITY_SINGLE_TOP
				| Intent.FLAG_ACTIVITY_NEW_TASK);
		TiApplication.getInstance().startActivity(intent);
	}

	protected KrollFunction getFunction(KrollDict d, String property) {
		KrollFunction kFunction;
		if (d.containsKey(property)) {
			Object obj = d.get(property);
			if (obj instanceof KrollFunction) {
				kFunction = (KrollFunction) obj;
			} else {
				kFunction = null;
			}
		} else {
			kFunction = null;
		}
		return kFunction;
	}
}
